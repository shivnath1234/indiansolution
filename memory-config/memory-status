#!/bin/bash
# FILE PATH: /usr/local/bin/memory-status
# Memory Status and Monitoring Tool for Optimized Systems

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

print_good() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Function to format bytes to human readable
format_bytes() {
    local bytes=$1
    if [[ $bytes -gt 1073741824 ]]; then
        echo "$(( bytes / 1073741824 )) GB"
    elif [[ $bytes -gt 1048576 ]]; then
        echo "$(( bytes / 1048576 )) MB"
    elif [[ $bytes -gt 1024 ]]; then
        echo "$(( bytes / 1024 )) KB"
    else
        echo "$bytes B"
    fi
}

print_header "MEMORY OPTIMIZATION STATUS"
echo

print_header "System Memory Overview"
free -h
echo

print_header "Swap Hierarchy (Priority Order)"
if swapon --show >/dev/null 2>&1; then
    echo "Device          Type      Size    Used    Priority"
    echo "------------------------------------------------"
    swapon --show=NAME,TYPE,SIZE,USED,PRIO | tail -n +2 | sort -k5 -nr
    echo
    
    # Check if hierarchy is correct
    local zram_prio=$(swapon --show=NAME,PRIO | grep zram | awk '{print $2}' | head -1)
    local file_prio=$(swapon --show=NAME,PRIO | grep -v zram | awk '{print $2}' | head -1)
    
    if [[ -n "$zram_prio" ]] && [[ -n "$file_prio" ]]; then
        if [[ $zram_prio -gt $file_prio ]]; then
            print_good "Swap hierarchy is correctly configured (ZRAM priority > traditional swap)"
        else
            print_warning "Swap hierarchy may be incorrect (ZRAM priority should be higher)"
        fi
    fi
else
    print_warning "No swap devices active"
fi
echo

print_header "ZRAM Status"
if [[ -e /dev/zram0 ]]; then
    print_good "ZRAM device active: /dev/zram0"
    
    # Get ZRAM statistics
    if [[ -r /sys/block/zram0/comp_algorithm ]]; then
        local algo=$(cat /sys/block/zram0/comp_algorithm 2>/dev/null | grep -o '\[.*\]' | tr -d '[]')
        echo "  Algorithm: $algo"
    fi
    
    if [[ -r /sys/block/zram0/disksize ]]; then
        local disksize=$(cat /sys/block/zram0/disksize 2>/dev/null)
        echo "  Disk Size: $(format_bytes $disksize)"
    fi
    
    if [[ -r /sys/block/zram0/orig_data_size ]]; then
        local orig_size=$(cat /sys/block/zram0/orig_data_size 2>/dev/null)
        echo "  Original Data: $(format_bytes $orig_size)"
    fi
    
    if [[ -r /sys/block/zram0/compr_data_size ]]; then
        local comp_size=$(cat /sys/block/zram0/compr_data_size 2>/dev/null)
        echo "  Compressed Data: $(format_bytes $comp_size)"
    fi
    
    # Calculate compression ratio
    if [[ -r /sys/block/zram0/orig_data_size ]] && [[ -r /sys/block/zram0/compr_data_size ]]; then
        local orig=$(cat /sys/block/zram0/orig_data_size 2>/dev/null)
        local comp=$(cat /sys/block/zram0/compr_data_size 2>/dev/null)
        if [[ $comp -gt 0 ]] && [[ $orig -gt 0 ]]; then
            local ratio=$(echo "scale=2; $orig / $comp" | bc 2>/dev/null || echo "N/A")
            echo "  Compression Ratio: ${ratio}:1"
            
            # Evaluate compression efficiency
            local ratio_num=$(echo "$ratio" | cut -d. -f1)
            if [[ $ratio_num -ge 3 ]]; then
                print_good "Excellent compression ratio"
            elif [[ $ratio_num -ge 2 ]]; then
                print_good "Good compression ratio"
            else
                print_warning "Low compression ratio - consider checking workload"
            fi
        fi
    fi
    
    # Check for errors
    if [[ -r /sys/block/zram0/io_stat ]]; then
        local failed_reads=$(cat /sys/block/zram0/io_stat | awk '{print $3}')
        local failed_writes=$(cat /sys/block/zram0/io_stat | awk '{print $7}')
        if [[ $failed_reads -gt 0 ]] || [[ $failed_writes -gt 0 ]]; then
            print_warning "ZRAM I/O errors detected (reads: $failed_reads, writes: $failed_writes)"
        fi
    fi
else
    print_error "ZRAM device not found"
fi
echo

print_header "zswap Status"
if [[ -d /sys/module/zswap ]]; then
    local enabled=$(cat /sys/module/zswap/parameters/enabled 2>/dev/null || echo 'Unknown')
    if [[ "$enabled" == "Y" ]]; then
        print_good "zswap is enabled"
    else
        print_warning "zswap is disabled"
    fi
    
    echo "  Compressor: $(cat /sys/module/zswap/parameters/compressor 2>/dev/null || echo 'Unknown')"
    echo "  Pool Type: $(cat /sys/module/zswap/parameters/zpool 2>/dev/null || echo 'Unknown')"
    echo "  Max Pool %: $(cat /sys/module/zswap/parameters/max_pool_percent 2>/dev/null || echo 'Unknown')%"
    
    # Check zswap statistics if available
    if [[ -r /sys/kernel/debug/zswap/pool_total_size ]]; then
        local pool_size=$(cat /sys/kernel/debug/zswap/pool_total_size 2>/dev/null)
        echo "  Pool Size: $(format_bytes $pool_size)"
    fi
    
    if [[ -r /sys/kernel/debug/zswap/stored_pages ]]; then
        local stored_pages=$(cat /sys/kernel/debug/zswap/stored_pages 2>/dev/null)
        echo "  Stored Pages: $stored_pages"
    fi
else
    print_warning "zswap module not available"
fi
echo

print_header "Key Kernel Parameters"
echo "Swappiness: $(sysctl -n vm.swappiness 2>/dev/null || echo 'Unknown')"
echo "VFS Cache Pressure: $(sysctl -n vm.vfs_cache_pressure 2>/dev/null || echo 'Unknown')"
echo "Min Free Memory: $(sysctl -n vm.min_free_kbytes 2>/dev/null | numfmt --to=iec --suffix=B || echo 'Unknown')"
echo "Dirty Ratio: $(sysctl -n vm.dirty_ratio 2>/dev/null || echo 'Unknown')%"
echo "Dirty Background Ratio: $(sysctl -n vm.dirty_background_ratio 2>/dev/null || echo 'Unknown')%"
echo "Overcommit Memory: $(sysctl -n vm.overcommit_memory 2>/dev/null || echo 'Unknown')"

# Evaluate swappiness setting
local swappiness=$(sysctl -n vm.swappiness 2>/dev/null)
if [[ -n "$swappiness" ]]; then
    if [[ $swappiness -le 20 ]]; then
        print_good "Swappiness optimized for game servers"
    elif [[ $swappiness -le 40 ]]; then
        print_warning "Swappiness could be lower for better game server performance"
    else
        print_warning "Swappiness is high - consider lowering for game servers"
    fi
fi
echo

print_header "Transparent Huge Pages"
if [[ -r /sys/kernel/mm/transparent_hugepage/enabled ]]; then
    local thp_enabled=$(cat /sys/kernel/mm/transparent_hugepage/enabled)
    echo "THP Enabled: $thp_enabled"
    
    if [[ -r /sys/kernel/mm/transparent_hugepage/defrag ]]; then
        echo "THP Defrag: $(cat /sys/kernel/mm/transparent_hugepage/defrag)"
    fi
    
    # Check if THP is optimally configured
    if echo "$thp_enabled" | grep -q "\[madvise\]"; then
        print_good "THP configured optimally (madvise mode)"
    elif echo "$thp_enabled" | grep -q "\[always\]"; then
        print_warning "THP set to 'always' - may cause latency spikes"
    elif echo "$thp_enabled" | grep -q "\[never\]"; then
        print_warning "THP disabled - missing potential memory benefits"
    fi
else
    print_warning "THP not available on this kernel"
fi
echo

print_header "Memory Pressure Indicators"
# Check for recent OOM kills
local oom_kills=$(dmesg | grep -i "killed process" | tail -5)
if [[ -n "$oom_kills" ]]; then
    print_warning "Recent OOM kills detected:"
    echo "$oom_kills" | while read -r line; do
        echo "  $line"
    done
else
    print_good "No recent OOM kills detected"
fi

# Check current memory pressure
local mem_available=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
local mem_total=$(grep MemTotal /proc/meminfo | awk '{print $2}')
if [[ -n "$mem_available" ]] && [[ -n "$mem_total" ]]; then
    local mem_usage_percent=$(( (mem_total - mem_available) * 100 / mem_total ))
    echo "Memory Usage: ${mem_usage_percent}%"
    
    if [[ $mem_usage_percent -lt 70 ]]; then
        print_good "Memory usage is healthy"
    elif [[ $mem_usage_percent -lt 85 ]]; then
        print_warning "Memory usage is moderate"
    else
        print_warning "Memory usage is high - monitor for potential issues"
    fi
fi
echo

print_header "Quick Performance Check"
echo "Run these commands for detailed monitoring:"
echo "  vmstat 5          # Memory and swap activity"
echo "  iostat -x 5       # Disk I/O (if swap is being used)"
echo "  sar -r 5          # Memory utilization over time"
echo "  watch -n 2 'cat /proc/meminfo | head -20'  # Real-time memory stats"
